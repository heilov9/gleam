// Code generated by protoc-gen-go.
// source: gleam.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	gleam.proto

It has these top-level messages:
	ComputeRequest
	ComputeResource
	DataResource
	Location
	Allocation
	AllocationResult
	Heartbeat
	Empty
	DataLocation
	FlowExecutionStatus
	FileResourceRequest
	FileResourceResponse
	ExecutionRequest
	ExecutionResponse
	ExecutionStat
	InstructionStat
	ControlMessage
	DeleteDatasetShardRequest
	DeleteDatasetShardResponse
	WriteRequest
	ReadRequest
	InstructionSet
	Instruction
	OrderBy
	DatasetShard
	DatasetShardLocation
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ////////////////////////////////////////////////
type ComputeRequest struct {
	DataCenter       string             `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	ComputeResources []*ComputeResource `protobuf:"bytes,2,rep,name=compute_resources,json=computeResources" json:"compute_resources,omitempty"`
	Username         string             `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Hostname         string             `protobuf:"bytes,4,opt,name=hostname" json:"hostname,omitempty"`
	FlowHashCode     uint32             `protobuf:"varint,5,opt,name=flowHashCode" json:"flowHashCode,omitempty"`
}

func (m *ComputeRequest) Reset()                    { *m = ComputeRequest{} }
func (m *ComputeRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputeRequest) ProtoMessage()               {}
func (*ComputeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ComputeRequest) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *ComputeRequest) GetComputeResources() []*ComputeResource {
	if m != nil {
		return m.ComputeResources
	}
	return nil
}

func (m *ComputeRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ComputeRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ComputeRequest) GetFlowHashCode() uint32 {
	if m != nil {
		return m.FlowHashCode
	}
	return 0
}

type ComputeResource struct {
	CpuCount int32 `protobuf:"varint,1,opt,name=cpu_count,json=cpuCount" json:"cpu_count,omitempty"`
	CpuLevel int32 `protobuf:"varint,2,opt,name=cpu_level,json=cpuLevel" json:"cpu_level,omitempty"`
	GpuCount int32 `protobuf:"varint,3,opt,name=gpu_count,json=gpuCount" json:"gpu_count,omitempty"`
	GpuLevel int32 `protobuf:"varint,4,opt,name=gpu_level,json=gpuLevel" json:"gpu_level,omitempty"`
	MemoryMb int64 `protobuf:"varint,5,opt,name=memory_mb,json=memoryMb" json:"memory_mb,omitempty"`
	DiskMb   int64 `protobuf:"varint,6,opt,name=disk_mb,json=diskMb" json:"disk_mb,omitempty"`
}

func (m *ComputeResource) Reset()                    { *m = ComputeResource{} }
func (m *ComputeResource) String() string            { return proto.CompactTextString(m) }
func (*ComputeResource) ProtoMessage()               {}
func (*ComputeResource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ComputeResource) GetCpuCount() int32 {
	if m != nil {
		return m.CpuCount
	}
	return 0
}

func (m *ComputeResource) GetCpuLevel() int32 {
	if m != nil {
		return m.CpuLevel
	}
	return 0
}

func (m *ComputeResource) GetGpuCount() int32 {
	if m != nil {
		return m.GpuCount
	}
	return 0
}

func (m *ComputeResource) GetGpuLevel() int32 {
	if m != nil {
		return m.GpuLevel
	}
	return 0
}

func (m *ComputeResource) GetMemoryMb() int64 {
	if m != nil {
		return m.MemoryMb
	}
	return 0
}

func (m *ComputeResource) GetDiskMb() int64 {
	if m != nil {
		return m.DiskMb
	}
	return 0
}

type DataResource struct {
	Location *Location `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Size     int64     `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *DataResource) Reset()                    { *m = DataResource{} }
func (m *DataResource) String() string            { return proto.CompactTextString(m) }
func (*DataResource) ProtoMessage()               {}
func (*DataResource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DataResource) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *DataResource) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Location struct {
	DataCenter string `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	Rack       string `protobuf:"bytes,2,opt,name=rack" json:"rack,omitempty"`
	Server     string `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
	Port       int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Location) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *Location) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *Location) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *Location) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Allocation struct {
	Location  *Location        `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Allocated *ComputeResource `protobuf:"bytes,2,opt,name=allocated" json:"allocated,omitempty"`
}

func (m *Allocation) Reset()                    { *m = Allocation{} }
func (m *Allocation) String() string            { return proto.CompactTextString(m) }
func (*Allocation) ProtoMessage()               {}
func (*Allocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Allocation) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Allocation) GetAllocated() *ComputeResource {
	if m != nil {
		return m.Allocated
	}
	return nil
}

type AllocationResult struct {
	Allocations []*Allocation `protobuf:"bytes,1,rep,name=allocations" json:"allocations,omitempty"`
}

func (m *AllocationResult) Reset()                    { *m = AllocationResult{} }
func (m *AllocationResult) String() string            { return proto.CompactTextString(m) }
func (*AllocationResult) ProtoMessage()               {}
func (*AllocationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AllocationResult) GetAllocations() []*Allocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

// ////////////////////////////////////////////////
type Heartbeat struct {
	Location  *Location        `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Resource  *ComputeResource `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
	Allocated *ComputeResource `protobuf:"bytes,3,opt,name=allocated" json:"allocated,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Heartbeat) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Heartbeat) GetResource() *ComputeResource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Heartbeat) GetAllocated() *ComputeResource {
	if m != nil {
		return m.Allocated
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// ////////////////////////////////////////////////
type DataLocation struct {
	Name     string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Location *Location `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	OnDisk   bool      `protobuf:"varint,3,opt,name=onDisk" json:"onDisk,omitempty"`
}

func (m *DataLocation) Reset()                    { *m = DataLocation{} }
func (m *DataLocation) String() string            { return proto.CompactTextString(m) }
func (*DataLocation) ProtoMessage()               {}
func (*DataLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DataLocation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataLocation) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *DataLocation) GetOnDisk() bool {
	if m != nil {
		return m.OnDisk
	}
	return false
}

// ////////////////////////////////////////////////
type FlowExecutionStatus struct {
	StepGroups    []*FlowExecutionStatus_StepGroup    `protobuf:"bytes,1,rep,name=stepGroups" json:"stepGroups,omitempty"`
	TaskGroups    []*FlowExecutionStatus_TaskGroup    `protobuf:"bytes,2,rep,name=taskGroups" json:"taskGroups,omitempty"`
	Datasets      []*FlowExecutionStatus_Dataset      `protobuf:"bytes,3,rep,name=datasets" json:"datasets,omitempty"`
	DatasetShards []*FlowExecutionStatus_DatasetShard `protobuf:"bytes,4,rep,name=datasetShards" json:"datasetShards,omitempty"`
	Tasks         []*FlowExecutionStatus_Task         `protobuf:"bytes,5,rep,name=tasks" json:"tasks,omitempty"`
	Steps         []*FlowExecutionStatus_Step         `protobuf:"bytes,6,rep,name=steps" json:"steps,omitempty"`
	Id            uint32                              `protobuf:"varint,7,opt,name=id" json:"id,omitempty"`
	Driver        *FlowExecutionStatus_DriverInfo     `protobuf:"bytes,8,opt,name=driver" json:"driver,omitempty"`
}

func (m *FlowExecutionStatus) Reset()                    { *m = FlowExecutionStatus{} }
func (m *FlowExecutionStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowExecutionStatus) ProtoMessage()               {}
func (*FlowExecutionStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FlowExecutionStatus) GetStepGroups() []*FlowExecutionStatus_StepGroup {
	if m != nil {
		return m.StepGroups
	}
	return nil
}

func (m *FlowExecutionStatus) GetTaskGroups() []*FlowExecutionStatus_TaskGroup {
	if m != nil {
		return m.TaskGroups
	}
	return nil
}

func (m *FlowExecutionStatus) GetDatasets() []*FlowExecutionStatus_Dataset {
	if m != nil {
		return m.Datasets
	}
	return nil
}

func (m *FlowExecutionStatus) GetDatasetShards() []*FlowExecutionStatus_DatasetShard {
	if m != nil {
		return m.DatasetShards
	}
	return nil
}

func (m *FlowExecutionStatus) GetTasks() []*FlowExecutionStatus_Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *FlowExecutionStatus) GetSteps() []*FlowExecutionStatus_Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *FlowExecutionStatus) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FlowExecutionStatus) GetDriver() *FlowExecutionStatus_DriverInfo {
	if m != nil {
		return m.Driver
	}
	return nil
}

type FlowExecutionStatus_Task struct {
	StepId int32 `protobuf:"varint,1,opt,name=stepId" json:"stepId,omitempty"`
	Id     int32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *FlowExecutionStatus_Task) Reset()                    { *m = FlowExecutionStatus_Task{} }
func (m *FlowExecutionStatus_Task) String() string            { return proto.CompactTextString(m) }
func (*FlowExecutionStatus_Task) ProtoMessage()               {}
func (*FlowExecutionStatus_Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *FlowExecutionStatus_Task) GetStepId() int32 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *FlowExecutionStatus_Task) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FlowExecutionStatus_Step struct {
	Id              int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ParentIds       []int32 `protobuf:"varint,3,rep,packed,name=parentIds" json:"parentIds,omitempty"`
	TaskIds         []int32 `protobuf:"varint,4,rep,packed,name=taskIds" json:"taskIds,omitempty"`
	InputDatasetId  []int32 `protobuf:"varint,5,rep,packed,name=inputDatasetId" json:"inputDatasetId,omitempty"`
	OutputDatasetId int32   `protobuf:"varint,6,opt,name=outputDatasetId" json:"outputDatasetId,omitempty"`
}

func (m *FlowExecutionStatus_Step) Reset()                    { *m = FlowExecutionStatus_Step{} }
func (m *FlowExecutionStatus_Step) String() string            { return proto.CompactTextString(m) }
func (*FlowExecutionStatus_Step) ProtoMessage()               {}
func (*FlowExecutionStatus_Step) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 1} }

func (m *FlowExecutionStatus_Step) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FlowExecutionStatus_Step) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlowExecutionStatus_Step) GetParentIds() []int32 {
	if m != nil {
		return m.ParentIds
	}
	return nil
}

func (m *FlowExecutionStatus_Step) GetTaskIds() []int32 {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

func (m *FlowExecutionStatus_Step) GetInputDatasetId() []int32 {
	if m != nil {
		return m.InputDatasetId
	}
	return nil
}

func (m *FlowExecutionStatus_Step) GetOutputDatasetId() int32 {
	if m != nil {
		return m.OutputDatasetId
	}
	return 0
}

type FlowExecutionStatus_Dataset struct {
	Id             int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StepId         int32   `protobuf:"varint,2,opt,name=stepId" json:"stepId,omitempty"`
	ReadingStepIds []int32 `protobuf:"varint,3,rep,packed,name=readingStepIds" json:"readingStepIds,omitempty"`
}

func (m *FlowExecutionStatus_Dataset) Reset()                    { *m = FlowExecutionStatus_Dataset{} }
func (m *FlowExecutionStatus_Dataset) String() string            { return proto.CompactTextString(m) }
func (*FlowExecutionStatus_Dataset) ProtoMessage()               {}
func (*FlowExecutionStatus_Dataset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 2} }

func (m *FlowExecutionStatus_Dataset) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FlowExecutionStatus_Dataset) GetStepId() int32 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *FlowExecutionStatus_Dataset) GetReadingStepIds() []int32 {
	if m != nil {
		return m.ReadingStepIds
	}
	return nil
}

type FlowExecutionStatus_DatasetShard struct {
	DatasetId int32 `protobuf:"varint,1,opt,name=datasetId" json:"datasetId,omitempty"`
	Id        int32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *FlowExecutionStatus_DatasetShard) Reset()         { *m = FlowExecutionStatus_DatasetShard{} }
func (m *FlowExecutionStatus_DatasetShard) String() string { return proto.CompactTextString(m) }
func (*FlowExecutionStatus_DatasetShard) ProtoMessage()    {}
func (*FlowExecutionStatus_DatasetShard) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 3}
}

func (m *FlowExecutionStatus_DatasetShard) GetDatasetId() int32 {
	if m != nil {
		return m.DatasetId
	}
	return 0
}

func (m *FlowExecutionStatus_DatasetShard) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FlowExecutionStatus_StepGroup struct {
	StepIds   []int32 `protobuf:"varint,1,rep,packed,name=stepIds" json:"stepIds,omitempty"`
	ParentIds []int32 `protobuf:"varint,2,rep,packed,name=parentIds" json:"parentIds,omitempty"`
}

func (m *FlowExecutionStatus_StepGroup) Reset()         { *m = FlowExecutionStatus_StepGroup{} }
func (m *FlowExecutionStatus_StepGroup) String() string { return proto.CompactTextString(m) }
func (*FlowExecutionStatus_StepGroup) ProtoMessage()    {}
func (*FlowExecutionStatus_StepGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 4}
}

func (m *FlowExecutionStatus_StepGroup) GetStepIds() []int32 {
	if m != nil {
		return m.StepIds
	}
	return nil
}

func (m *FlowExecutionStatus_StepGroup) GetParentIds() []int32 {
	if m != nil {
		return m.ParentIds
	}
	return nil
}

type FlowExecutionStatus_TaskGroup struct {
	StepIds    []int32                                    `protobuf:"varint,1,rep,packed,name=stepIds" json:"stepIds,omitempty"`
	TaskIds    []int32                                    `protobuf:"varint,2,rep,packed,name=taskIds" json:"taskIds,omitempty"`
	Request    *ExecutionRequest                          `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	Allocation *Allocation                                `protobuf:"bytes,4,opt,name=allocation" json:"allocation,omitempty"`
	Executions []*FlowExecutionStatus_TaskGroup_Execution `protobuf:"bytes,5,rep,name=executions" json:"executions,omitempty"`
}

func (m *FlowExecutionStatus_TaskGroup) Reset()         { *m = FlowExecutionStatus_TaskGroup{} }
func (m *FlowExecutionStatus_TaskGroup) String() string { return proto.CompactTextString(m) }
func (*FlowExecutionStatus_TaskGroup) ProtoMessage()    {}
func (*FlowExecutionStatus_TaskGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 5}
}

func (m *FlowExecutionStatus_TaskGroup) GetStepIds() []int32 {
	if m != nil {
		return m.StepIds
	}
	return nil
}

func (m *FlowExecutionStatus_TaskGroup) GetTaskIds() []int32 {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

func (m *FlowExecutionStatus_TaskGroup) GetRequest() *ExecutionRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *FlowExecutionStatus_TaskGroup) GetAllocation() *Allocation {
	if m != nil {
		return m.Allocation
	}
	return nil
}

func (m *FlowExecutionStatus_TaskGroup) GetExecutions() []*FlowExecutionStatus_TaskGroup_Execution {
	if m != nil {
		return m.Executions
	}
	return nil
}

type FlowExecutionStatus_TaskGroup_Execution struct {
	StartTime     int64          `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	StopTime      int64          `protobuf:"varint,2,opt,name=stop_time,json=stopTime" json:"stop_time,omitempty"`
	SystemTime    float64        `protobuf:"fixed64,3,opt,name=system_time,json=systemTime" json:"system_time,omitempty"`
	UserTime      float64        `protobuf:"fixed64,4,opt,name=user_time,json=userTime" json:"user_time,omitempty"`
	Error         []byte         `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	OutputHash    []byte         `protobuf:"bytes,6,opt,name=output_hash,json=outputHash,proto3" json:"output_hash,omitempty"`
	ExecutionStat *ExecutionStat `protobuf:"bytes,7,opt,name=executionStat" json:"executionStat,omitempty"`
}

func (m *FlowExecutionStatus_TaskGroup_Execution) Reset() {
	*m = FlowExecutionStatus_TaskGroup_Execution{}
}
func (m *FlowExecutionStatus_TaskGroup_Execution) String() string { return proto.CompactTextString(m) }
func (*FlowExecutionStatus_TaskGroup_Execution) ProtoMessage()    {}
func (*FlowExecutionStatus_TaskGroup_Execution) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 5, 0}
}

func (m *FlowExecutionStatus_TaskGroup_Execution) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FlowExecutionStatus_TaskGroup_Execution) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

func (m *FlowExecutionStatus_TaskGroup_Execution) GetSystemTime() float64 {
	if m != nil {
		return m.SystemTime
	}
	return 0
}

func (m *FlowExecutionStatus_TaskGroup_Execution) GetUserTime() float64 {
	if m != nil {
		return m.UserTime
	}
	return 0
}

func (m *FlowExecutionStatus_TaskGroup_Execution) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *FlowExecutionStatus_TaskGroup_Execution) GetOutputHash() []byte {
	if m != nil {
		return m.OutputHash
	}
	return nil
}

func (m *FlowExecutionStatus_TaskGroup_Execution) GetExecutionStat() *ExecutionStat {
	if m != nil {
		return m.ExecutionStat
	}
	return nil
}

type FlowExecutionStatus_DriverInfo struct {
	Username       string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Hostname       string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	Executable     string `protobuf:"bytes,3,opt,name=executable" json:"executable,omitempty"`
	ExecutableHash string `protobuf:"bytes,4,opt,name=executable_hash,json=executableHash" json:"executable_hash,omitempty"`
	StartTime      int64  `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	StopTime       int64  `protobuf:"varint,6,opt,name=stop_time,json=stopTime" json:"stop_time,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
}

func (m *FlowExecutionStatus_DriverInfo) Reset()         { *m = FlowExecutionStatus_DriverInfo{} }
func (m *FlowExecutionStatus_DriverInfo) String() string { return proto.CompactTextString(m) }
func (*FlowExecutionStatus_DriverInfo) ProtoMessage()    {}
func (*FlowExecutionStatus_DriverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 6}
}

func (m *FlowExecutionStatus_DriverInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FlowExecutionStatus_DriverInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *FlowExecutionStatus_DriverInfo) GetExecutable() string {
	if m != nil {
		return m.Executable
	}
	return ""
}

func (m *FlowExecutionStatus_DriverInfo) GetExecutableHash() string {
	if m != nil {
		return m.ExecutableHash
	}
	return ""
}

func (m *FlowExecutionStatus_DriverInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FlowExecutionStatus_DriverInfo) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

func (m *FlowExecutionStatus_DriverInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FileResourceRequest struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Dir          string `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
	Hash         uint32 `protobuf:"varint,3,opt,name=hash" json:"hash,omitempty"`
	FlowHashCode uint32 `protobuf:"varint,4,opt,name=flowHashCode" json:"flowHashCode,omitempty"`
	Content      []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *FileResourceRequest) Reset()                    { *m = FileResourceRequest{} }
func (m *FileResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*FileResourceRequest) ProtoMessage()               {}
func (*FileResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FileResourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileResourceRequest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *FileResourceRequest) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *FileResourceRequest) GetFlowHashCode() uint32 {
	if m != nil {
		return m.FlowHashCode
	}
	return 0
}

func (m *FileResourceRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type FileResourceResponse struct {
	AlreadyExists bool `protobuf:"varint,1,opt,name=alreadyExists" json:"alreadyExists,omitempty"`
	Ok            bool `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
}

func (m *FileResourceResponse) Reset()                    { *m = FileResourceResponse{} }
func (m *FileResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*FileResourceResponse) ProtoMessage()               {}
func (*FileResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FileResourceResponse) GetAlreadyExists() bool {
	if m != nil {
		return m.AlreadyExists
	}
	return false
}

func (m *FileResourceResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ExecutionRequest struct {
	InstructionSet *InstructionSet  `protobuf:"bytes,1,opt,name=instructionSet" json:"instructionSet,omitempty"`
	Dir            string           `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
	Resource       *ComputeResource `protobuf:"bytes,3,opt,name=resource" json:"resource,omitempty"`
}

func (m *ExecutionRequest) Reset()                    { *m = ExecutionRequest{} }
func (m *ExecutionRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionRequest) ProtoMessage()               {}
func (*ExecutionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ExecutionRequest) GetInstructionSet() *InstructionSet {
	if m != nil {
		return m.InstructionSet
	}
	return nil
}

func (m *ExecutionRequest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *ExecutionRequest) GetResource() *ComputeResource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type ExecutionResponse struct {
	Output        []byte         `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Error         []byte         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SystemTime    float64        `protobuf:"fixed64,3,opt,name=systemTime" json:"systemTime,omitempty"`
	UserTime      float64        `protobuf:"fixed64,4,opt,name=userTime" json:"userTime,omitempty"`
	ExecutionStat *ExecutionStat `protobuf:"bytes,5,opt,name=executionStat" json:"executionStat,omitempty"`
}

func (m *ExecutionResponse) Reset()                    { *m = ExecutionResponse{} }
func (m *ExecutionResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecutionResponse) ProtoMessage()               {}
func (*ExecutionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ExecutionResponse) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ExecutionResponse) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecutionResponse) GetSystemTime() float64 {
	if m != nil {
		return m.SystemTime
	}
	return 0
}

func (m *ExecutionResponse) GetUserTime() float64 {
	if m != nil {
		return m.UserTime
	}
	return 0
}

func (m *ExecutionResponse) GetExecutionStat() *ExecutionStat {
	if m != nil {
		return m.ExecutionStat
	}
	return nil
}

type ExecutionStat struct {
	FlowHashCode uint32             `protobuf:"varint,1,opt,name=flowHashCode" json:"flowHashCode,omitempty"`
	Stats        []*InstructionStat `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (m *ExecutionStat) Reset()                    { *m = ExecutionStat{} }
func (m *ExecutionStat) String() string            { return proto.CompactTextString(m) }
func (*ExecutionStat) ProtoMessage()               {}
func (*ExecutionStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ExecutionStat) GetFlowHashCode() uint32 {
	if m != nil {
		return m.FlowHashCode
	}
	return 0
}

func (m *ExecutionStat) GetStats() []*InstructionStat {
	if m != nil {
		return m.Stats
	}
	return nil
}

type InstructionStat struct {
	StepId        int32 `protobuf:"varint,1,opt,name=stepId" json:"stepId,omitempty"`
	TaskId        int32 `protobuf:"varint,2,opt,name=taskId" json:"taskId,omitempty"`
	InputCounter  int64 `protobuf:"varint,3,opt,name=inputCounter" json:"inputCounter,omitempty"`
	OutputCounter int64 `protobuf:"varint,4,opt,name=outputCounter" json:"outputCounter,omitempty"`
}

func (m *InstructionStat) Reset()                    { *m = InstructionStat{} }
func (m *InstructionStat) String() string            { return proto.CompactTextString(m) }
func (*InstructionStat) ProtoMessage()               {}
func (*InstructionStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *InstructionStat) GetStepId() int32 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *InstructionStat) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *InstructionStat) GetInputCounter() int64 {
	if m != nil {
		return m.InputCounter
	}
	return 0
}

func (m *InstructionStat) GetOutputCounter() int64 {
	if m != nil {
		return m.OutputCounter
	}
	return 0
}

type ControlMessage struct {
	IsOnDiskIO   bool          `protobuf:"varint,1,opt,name=isOnDiskIO" json:"isOnDiskIO,omitempty"`
	ReadRequest  *ReadRequest  `protobuf:"bytes,2,opt,name=readRequest" json:"readRequest,omitempty"`
	WriteRequest *WriteRequest `protobuf:"bytes,3,opt,name=writeRequest" json:"writeRequest,omitempty"`
}

func (m *ControlMessage) Reset()                    { *m = ControlMessage{} }
func (m *ControlMessage) String() string            { return proto.CompactTextString(m) }
func (*ControlMessage) ProtoMessage()               {}
func (*ControlMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ControlMessage) GetIsOnDiskIO() bool {
	if m != nil {
		return m.IsOnDiskIO
	}
	return false
}

func (m *ControlMessage) GetReadRequest() *ReadRequest {
	if m != nil {
		return m.ReadRequest
	}
	return nil
}

func (m *ControlMessage) GetWriteRequest() *WriteRequest {
	if m != nil {
		return m.WriteRequest
	}
	return nil
}

type DeleteDatasetShardRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteDatasetShardRequest) Reset()                    { *m = DeleteDatasetShardRequest{} }
func (m *DeleteDatasetShardRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDatasetShardRequest) ProtoMessage()               {}
func (*DeleteDatasetShardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteDatasetShardRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteDatasetShardResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *DeleteDatasetShardResponse) Reset()                    { *m = DeleteDatasetShardResponse{} }
func (m *DeleteDatasetShardResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDatasetShardResponse) ProtoMessage()               {}
func (*DeleteDatasetShardResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteDatasetShardResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type WriteRequest struct {
	ChannelName string `protobuf:"bytes,1,opt,name=channelName" json:"channelName,omitempty"`
	WriterName  string `protobuf:"bytes,2,opt,name=writerName" json:"writerName,omitempty"`
	ReaderCount int32  `protobuf:"varint,3,opt,name=readerCount" json:"readerCount,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *WriteRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *WriteRequest) GetWriterName() string {
	if m != nil {
		return m.WriterName
	}
	return ""
}

func (m *WriteRequest) GetReaderCount() int32 {
	if m != nil {
		return m.ReaderCount
	}
	return 0
}

type ReadRequest struct {
	ChannelName string `protobuf:"bytes,1,opt,name=channelName" json:"channelName,omitempty"`
	ReaderName  string `protobuf:"bytes,2,opt,name=readerName" json:"readerName,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ReadRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *ReadRequest) GetReaderName() string {
	if m != nil {
		return m.ReaderName
	}
	return ""
}

type InstructionSet struct {
	Instructions []*Instruction `protobuf:"bytes,1,rep,name=instructions" json:"instructions,omitempty"`
	ReaderCount  int32          `protobuf:"varint,2,opt,name=readerCount" json:"readerCount,omitempty"`
	FlowHashCode uint32         `protobuf:"varint,3,opt,name=flowHashCode" json:"flowHashCode,omitempty"`
	IsProfiling  bool           `protobuf:"varint,4,opt,name=isProfiling" json:"isProfiling,omitempty"`
	AgentAddress string         `protobuf:"bytes,5,opt,name=agentAddress" json:"agentAddress,omitempty"`
	Name         string         `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
}

func (m *InstructionSet) Reset()                    { *m = InstructionSet{} }
func (m *InstructionSet) String() string            { return proto.CompactTextString(m) }
func (*InstructionSet) ProtoMessage()               {}
func (*InstructionSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *InstructionSet) GetInstructions() []*Instruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

func (m *InstructionSet) GetReaderCount() int32 {
	if m != nil {
		return m.ReaderCount
	}
	return 0
}

func (m *InstructionSet) GetFlowHashCode() uint32 {
	if m != nil {
		return m.FlowHashCode
	}
	return 0
}

func (m *InstructionSet) GetIsProfiling() bool {
	if m != nil {
		return m.IsProfiling
	}
	return false
}

func (m *InstructionSet) GetAgentAddress() string {
	if m != nil {
		return m.AgentAddress
	}
	return ""
}

func (m *InstructionSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Instruction struct {
	StepId                   int32                                 `protobuf:"varint,1,opt,name=stepId" json:"stepId,omitempty"`
	TaskId                   int32                                 `protobuf:"varint,2,opt,name=taskId" json:"taskId,omitempty"`
	MemoryInMB               int32                                 `protobuf:"varint,3,opt,name=memoryInMB" json:"memoryInMB,omitempty"`
	InputShardLocations      []*DatasetShardLocation               `protobuf:"bytes,4,rep,name=inputShardLocations" json:"inputShardLocations,omitempty"`
	OutputShardLocations     []*DatasetShardLocation               `protobuf:"bytes,5,rep,name=OutputShardLocations,json=outputShardLocations" json:"OutputShardLocations,omitempty"`
	Select                   *Instruction_Select                   `protobuf:"bytes,6,opt,name=select" json:"select,omitempty"`
	JoinPartitionedSorted    *Instruction_JoinPartitionedSorted    `protobuf:"bytes,7,opt,name=joinPartitionedSorted" json:"joinPartitionedSorted,omitempty"`
	CoGroupPartitionedSorted *Instruction_CoGroupPartitionedSorted `protobuf:"bytes,8,opt,name=coGroupPartitionedSorted" json:"coGroupPartitionedSorted,omitempty"`
	PipeAsArgs               *Instruction_PipeAsArgs               `protobuf:"bytes,9,opt,name=pipeAsArgs" json:"pipeAsArgs,omitempty"`
	ScatterPartitions        *Instruction_ScatterPartitions        `protobuf:"bytes,10,opt,name=scatterPartitions" json:"scatterPartitions,omitempty"`
	CollectPartitions        *Instruction_CollectPartitions        `protobuf:"bytes,11,opt,name=collectPartitions" json:"collectPartitions,omitempty"`
	InputSplitReader         *Instruction_InputSplitReader         `protobuf:"bytes,12,opt,name=inputSplitReader" json:"inputSplitReader,omitempty"`
	RoundRobin               *Instruction_RoundRobin               `protobuf:"bytes,13,opt,name=roundRobin" json:"roundRobin,omitempty"`
	LocalTop                 *Instruction_LocalTop                 `protobuf:"bytes,14,opt,name=localTop" json:"localTop,omitempty"`
	Broadcast                *Instruction_Broadcast                `protobuf:"bytes,15,opt,name=broadcast" json:"broadcast,omitempty"`
	LocalHashAndJoinWith     *Instruction_LocalHashAndJoinWith     `protobuf:"bytes,16,opt,name=localHashAndJoinWith" json:"localHashAndJoinWith,omitempty"`
	Script                   *Instruction_Script                   `protobuf:"bytes,17,opt,name=script" json:"script,omitempty"`
	LocalSort                *Instruction_LocalSort                `protobuf:"bytes,18,opt,name=localSort" json:"localSort,omitempty"`
	MergeSortedTo            *Instruction_MergeSortedTo            `protobuf:"bytes,19,opt,name=mergeSortedTo" json:"mergeSortedTo,omitempty"`
	MergeTo                  *Instruction_MergeTo                  `protobuf:"bytes,20,opt,name=mergeTo" json:"mergeTo,omitempty"`
	LocalDistinct            *Instruction_LocalDistinct            `protobuf:"bytes,21,opt,name=localDistinct" json:"localDistinct,omitempty"`
	LocalLimit               *Instruction_LocalLimit               `protobuf:"bytes,22,opt,name=localLimit" json:"localLimit,omitempty"`
	LocalGroupBySorted       *Instruction_LocalGroupBySorted       `protobuf:"bytes,23,opt,name=localGroupBySorted" json:"localGroupBySorted,omitempty"`
}

func (m *Instruction) Reset()                    { *m = Instruction{} }
func (m *Instruction) String() string            { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()               {}
func (*Instruction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Instruction) GetStepId() int32 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *Instruction) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Instruction) GetMemoryInMB() int32 {
	if m != nil {
		return m.MemoryInMB
	}
	return 0
}

func (m *Instruction) GetInputShardLocations() []*DatasetShardLocation {
	if m != nil {
		return m.InputShardLocations
	}
	return nil
}

func (m *Instruction) GetOutputShardLocations() []*DatasetShardLocation {
	if m != nil {
		return m.OutputShardLocations
	}
	return nil
}

func (m *Instruction) GetSelect() *Instruction_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *Instruction) GetJoinPartitionedSorted() *Instruction_JoinPartitionedSorted {
	if m != nil {
		return m.JoinPartitionedSorted
	}
	return nil
}

func (m *Instruction) GetCoGroupPartitionedSorted() *Instruction_CoGroupPartitionedSorted {
	if m != nil {
		return m.CoGroupPartitionedSorted
	}
	return nil
}

func (m *Instruction) GetPipeAsArgs() *Instruction_PipeAsArgs {
	if m != nil {
		return m.PipeAsArgs
	}
	return nil
}

func (m *Instruction) GetScatterPartitions() *Instruction_ScatterPartitions {
	if m != nil {
		return m.ScatterPartitions
	}
	return nil
}

func (m *Instruction) GetCollectPartitions() *Instruction_CollectPartitions {
	if m != nil {
		return m.CollectPartitions
	}
	return nil
}

func (m *Instruction) GetInputSplitReader() *Instruction_InputSplitReader {
	if m != nil {
		return m.InputSplitReader
	}
	return nil
}

func (m *Instruction) GetRoundRobin() *Instruction_RoundRobin {
	if m != nil {
		return m.RoundRobin
	}
	return nil
}

func (m *Instruction) GetLocalTop() *Instruction_LocalTop {
	if m != nil {
		return m.LocalTop
	}
	return nil
}

func (m *Instruction) GetBroadcast() *Instruction_Broadcast {
	if m != nil {
		return m.Broadcast
	}
	return nil
}

func (m *Instruction) GetLocalHashAndJoinWith() *Instruction_LocalHashAndJoinWith {
	if m != nil {
		return m.LocalHashAndJoinWith
	}
	return nil
}

func (m *Instruction) GetScript() *Instruction_Script {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *Instruction) GetLocalSort() *Instruction_LocalSort {
	if m != nil {
		return m.LocalSort
	}
	return nil
}

func (m *Instruction) GetMergeSortedTo() *Instruction_MergeSortedTo {
	if m != nil {
		return m.MergeSortedTo
	}
	return nil
}

func (m *Instruction) GetMergeTo() *Instruction_MergeTo {
	if m != nil {
		return m.MergeTo
	}
	return nil
}

func (m *Instruction) GetLocalDistinct() *Instruction_LocalDistinct {
	if m != nil {
		return m.LocalDistinct
	}
	return nil
}

func (m *Instruction) GetLocalLimit() *Instruction_LocalLimit {
	if m != nil {
		return m.LocalLimit
	}
	return nil
}

func (m *Instruction) GetLocalGroupBySorted() *Instruction_LocalGroupBySorted {
	if m != nil {
		return m.LocalGroupBySorted
	}
	return nil
}

type Instruction_Select struct {
	KeyIndexes   []int32 `protobuf:"varint,1,rep,packed,name=keyIndexes" json:"keyIndexes,omitempty"`
	ValueIndexes []int32 `protobuf:"varint,2,rep,packed,name=valueIndexes" json:"valueIndexes,omitempty"`
}

func (m *Instruction_Select) Reset()                    { *m = Instruction_Select{} }
func (m *Instruction_Select) String() string            { return proto.CompactTextString(m) }
func (*Instruction_Select) ProtoMessage()               {}
func (*Instruction_Select) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 0} }

func (m *Instruction_Select) GetKeyIndexes() []int32 {
	if m != nil {
		return m.KeyIndexes
	}
	return nil
}

func (m *Instruction_Select) GetValueIndexes() []int32 {
	if m != nil {
		return m.ValueIndexes
	}
	return nil
}

type Instruction_JoinPartitionedSorted struct {
	Indexes          []int32 `protobuf:"varint,1,rep,packed,name=indexes" json:"indexes,omitempty"`
	IsLeftOuterJoin  bool    `protobuf:"varint,2,opt,name=isLeftOuterJoin" json:"isLeftOuterJoin,omitempty"`
	IsRightOuterJoin bool    `protobuf:"varint,3,opt,name=isRightOuterJoin" json:"isRightOuterJoin,omitempty"`
}

func (m *Instruction_JoinPartitionedSorted) Reset()         { *m = Instruction_JoinPartitionedSorted{} }
func (m *Instruction_JoinPartitionedSorted) String() string { return proto.CompactTextString(m) }
func (*Instruction_JoinPartitionedSorted) ProtoMessage()    {}
func (*Instruction_JoinPartitionedSorted) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 1}
}

func (m *Instruction_JoinPartitionedSorted) GetIndexes() []int32 {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *Instruction_JoinPartitionedSorted) GetIsLeftOuterJoin() bool {
	if m != nil {
		return m.IsLeftOuterJoin
	}
	return false
}

func (m *Instruction_JoinPartitionedSorted) GetIsRightOuterJoin() bool {
	if m != nil {
		return m.IsRightOuterJoin
	}
	return false
}

type Instruction_CoGroupPartitionedSorted struct {
	Indexes []int32 `protobuf:"varint,1,rep,packed,name=indexes" json:"indexes,omitempty"`
}

func (m *Instruction_CoGroupPartitionedSorted) Reset()         { *m = Instruction_CoGroupPartitionedSorted{} }
func (m *Instruction_CoGroupPartitionedSorted) String() string { return proto.CompactTextString(m) }
func (*Instruction_CoGroupPartitionedSorted) ProtoMessage()    {}
func (*Instruction_CoGroupPartitionedSorted) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 2}
}

func (m *Instruction_CoGroupPartitionedSorted) GetIndexes() []int32 {
	if m != nil {
		return m.Indexes
	}
	return nil
}

type Instruction_PipeAsArgs struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (m *Instruction_PipeAsArgs) Reset()                    { *m = Instruction_PipeAsArgs{} }
func (m *Instruction_PipeAsArgs) String() string            { return proto.CompactTextString(m) }
func (*Instruction_PipeAsArgs) ProtoMessage()               {}
func (*Instruction_PipeAsArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 3} }

func (m *Instruction_PipeAsArgs) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type Instruction_ScatterPartitions struct {
	Indexes []int32 `protobuf:"varint,1,rep,packed,name=indexes" json:"indexes,omitempty"`
}

func (m *Instruction_ScatterPartitions) Reset()         { *m = Instruction_ScatterPartitions{} }
func (m *Instruction_ScatterPartitions) String() string { return proto.CompactTextString(m) }
func (*Instruction_ScatterPartitions) ProtoMessage()    {}
func (*Instruction_ScatterPartitions) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 4}
}

func (m *Instruction_ScatterPartitions) GetIndexes() []int32 {
	if m != nil {
		return m.Indexes
	}
	return nil
}

type Instruction_CollectPartitions struct {
}

func (m *Instruction_CollectPartitions) Reset()         { *m = Instruction_CollectPartitions{} }
func (m *Instruction_CollectPartitions) String() string { return proto.CompactTextString(m) }
func (*Instruction_CollectPartitions) ProtoMessage()    {}
func (*Instruction_CollectPartitions) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 5}
}

type Instruction_InputSplitReader struct {
	InputType string `protobuf:"bytes,1,opt,name=inputType" json:"inputType,omitempty"`
}

func (m *Instruction_InputSplitReader) Reset()         { *m = Instruction_InputSplitReader{} }
func (m *Instruction_InputSplitReader) String() string { return proto.CompactTextString(m) }
func (*Instruction_InputSplitReader) ProtoMessage()    {}
func (*Instruction_InputSplitReader) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 6}
}

func (m *Instruction_InputSplitReader) GetInputType() string {
	if m != nil {
		return m.InputType
	}
	return ""
}

type Instruction_RoundRobin struct {
}

func (m *Instruction_RoundRobin) Reset()                    { *m = Instruction_RoundRobin{} }
func (m *Instruction_RoundRobin) String() string            { return proto.CompactTextString(m) }
func (*Instruction_RoundRobin) ProtoMessage()               {}
func (*Instruction_RoundRobin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 7} }

type Instruction_LocalTop struct {
	N        int32      `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
	OrderBys []*OrderBy `protobuf:"bytes,2,rep,name=orderBys" json:"orderBys,omitempty"`
}

func (m *Instruction_LocalTop) Reset()                    { *m = Instruction_LocalTop{} }
func (m *Instruction_LocalTop) String() string            { return proto.CompactTextString(m) }
func (*Instruction_LocalTop) ProtoMessage()               {}
func (*Instruction_LocalTop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 8} }

func (m *Instruction_LocalTop) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Instruction_LocalTop) GetOrderBys() []*OrderBy {
	if m != nil {
		return m.OrderBys
	}
	return nil
}

type Instruction_Broadcast struct {
}

func (m *Instruction_Broadcast) Reset()                    { *m = Instruction_Broadcast{} }
func (m *Instruction_Broadcast) String() string            { return proto.CompactTextString(m) }
func (*Instruction_Broadcast) ProtoMessage()               {}
func (*Instruction_Broadcast) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 9} }

type Instruction_LocalHashAndJoinWith struct {
	Indexes []int32 `protobuf:"varint,1,rep,packed,name=indexes" json:"indexes,omitempty"`
}

func (m *Instruction_LocalHashAndJoinWith) Reset()         { *m = Instruction_LocalHashAndJoinWith{} }
func (m *Instruction_LocalHashAndJoinWith) String() string { return proto.CompactTextString(m) }
func (*Instruction_LocalHashAndJoinWith) ProtoMessage()    {}
func (*Instruction_LocalHashAndJoinWith) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 10}
}

func (m *Instruction_LocalHashAndJoinWith) GetIndexes() []int32 {
	if m != nil {
		return m.Indexes
	}
	return nil
}

type Instruction_Script struct {
	IsPipe bool     `protobuf:"varint,1,opt,name=isPipe" json:"isPipe,omitempty"`
	Path   string   `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Args   []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	Env    []string `protobuf:"bytes,4,rep,name=env" json:"env,omitempty"`
}

func (m *Instruction_Script) Reset()                    { *m = Instruction_Script{} }
func (m *Instruction_Script) String() string            { return proto.CompactTextString(m) }
func (*Instruction_Script) ProtoMessage()               {}
func (*Instruction_Script) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 11} }

func (m *Instruction_Script) GetIsPipe() bool {
	if m != nil {
		return m.IsPipe
	}
	return false
}

func (m *Instruction_Script) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Instruction_Script) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Instruction_Script) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

type Instruction_LocalSort struct {
	OrderBys []*OrderBy `protobuf:"bytes,1,rep,name=orderBys" json:"orderBys,omitempty"`
}

func (m *Instruction_LocalSort) Reset()                    { *m = Instruction_LocalSort{} }
func (m *Instruction_LocalSort) String() string            { return proto.CompactTextString(m) }
func (*Instruction_LocalSort) ProtoMessage()               {}
func (*Instruction_LocalSort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 12} }

func (m *Instruction_LocalSort) GetOrderBys() []*OrderBy {
	if m != nil {
		return m.OrderBys
	}
	return nil
}

type Instruction_MergeSortedTo struct {
	OrderBys []*OrderBy `protobuf:"bytes,1,rep,name=orderBys" json:"orderBys,omitempty"`
}

func (m *Instruction_MergeSortedTo) Reset()                    { *m = Instruction_MergeSortedTo{} }
func (m *Instruction_MergeSortedTo) String() string            { return proto.CompactTextString(m) }
func (*Instruction_MergeSortedTo) ProtoMessage()               {}
func (*Instruction_MergeSortedTo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 13} }

func (m *Instruction_MergeSortedTo) GetOrderBys() []*OrderBy {
	if m != nil {
		return m.OrderBys
	}
	return nil
}

type Instruction_MergeTo struct {
}

func (m *Instruction_MergeTo) Reset()                    { *m = Instruction_MergeTo{} }
func (m *Instruction_MergeTo) String() string            { return proto.CompactTextString(m) }
func (*Instruction_MergeTo) ProtoMessage()               {}
func (*Instruction_MergeTo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 14} }

type Instruction_LocalDistinct struct {
	OrderBys []*OrderBy `protobuf:"bytes,1,rep,name=orderBys" json:"orderBys,omitempty"`
}

func (m *Instruction_LocalDistinct) Reset()                    { *m = Instruction_LocalDistinct{} }
func (m *Instruction_LocalDistinct) String() string            { return proto.CompactTextString(m) }
func (*Instruction_LocalDistinct) ProtoMessage()               {}
func (*Instruction_LocalDistinct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 15} }

func (m *Instruction_LocalDistinct) GetOrderBys() []*OrderBy {
	if m != nil {
		return m.OrderBys
	}
	return nil
}

type Instruction_LocalLimit struct {
	N      int32 `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *Instruction_LocalLimit) Reset()                    { *m = Instruction_LocalLimit{} }
func (m *Instruction_LocalLimit) String() string            { return proto.CompactTextString(m) }
func (*Instruction_LocalLimit) ProtoMessage()               {}
func (*Instruction_LocalLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 16} }

func (m *Instruction_LocalLimit) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Instruction_LocalLimit) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type Instruction_LocalGroupBySorted struct {
	Indexes []int32 `protobuf:"varint,1,rep,packed,name=indexes" json:"indexes,omitempty"`
}

func (m *Instruction_LocalGroupBySorted) Reset()         { *m = Instruction_LocalGroupBySorted{} }
func (m *Instruction_LocalGroupBySorted) String() string { return proto.CompactTextString(m) }
func (*Instruction_LocalGroupBySorted) ProtoMessage()    {}
func (*Instruction_LocalGroupBySorted) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 17}
}

func (m *Instruction_LocalGroupBySorted) GetIndexes() []int32 {
	if m != nil {
		return m.Indexes
	}
	return nil
}

type OrderBy struct {
	Index int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Order int32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
}

func (m *OrderBy) Reset()                    { *m = OrderBy{} }
func (m *OrderBy) String() string            { return proto.CompactTextString(m) }
func (*OrderBy) ProtoMessage()               {}
func (*OrderBy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *OrderBy) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *OrderBy) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

type DatasetShard struct {
	FlowName       string `protobuf:"bytes,1,opt,name=FlowName,json=flowName" json:"FlowName,omitempty"`
	DatasetId      int32  `protobuf:"varint,2,opt,name=DatasetId,json=datasetId" json:"DatasetId,omitempty"`
	DatasetShardId int32  `protobuf:"varint,3,opt,name=DatasetShardId,json=datasetShardId" json:"DatasetShardId,omitempty"`
	FlowHashCode   uint32 `protobuf:"varint,4,opt,name=FlowHashCode,json=flowHashCode" json:"FlowHashCode,omitempty"`
}

func (m *DatasetShard) Reset()                    { *m = DatasetShard{} }
func (m *DatasetShard) String() string            { return proto.CompactTextString(m) }
func (*DatasetShard) ProtoMessage()               {}
func (*DatasetShard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DatasetShard) GetFlowName() string {
	if m != nil {
		return m.FlowName
	}
	return ""
}

func (m *DatasetShard) GetDatasetId() int32 {
	if m != nil {
		return m.DatasetId
	}
	return 0
}

func (m *DatasetShard) GetDatasetShardId() int32 {
	if m != nil {
		return m.DatasetShardId
	}
	return 0
}

func (m *DatasetShard) GetFlowHashCode() uint32 {
	if m != nil {
		return m.FlowHashCode
	}
	return 0
}

type DatasetShardLocation struct {
	Name   string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=Host,json=host" json:"Host,omitempty"`
	Port   int32  `protobuf:"varint,3,opt,name=Port,json=port" json:"Port,omitempty"`
	OnDisk bool   `protobuf:"varint,4,opt,name=onDisk" json:"onDisk,omitempty"`
}

func (m *DatasetShardLocation) Reset()                    { *m = DatasetShardLocation{} }
func (m *DatasetShardLocation) String() string            { return proto.CompactTextString(m) }
func (*DatasetShardLocation) ProtoMessage()               {}
func (*DatasetShardLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DatasetShardLocation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatasetShardLocation) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DatasetShardLocation) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DatasetShardLocation) GetOnDisk() bool {
	if m != nil {
		return m.OnDisk
	}
	return false
}

func init() {
	proto.RegisterType((*ComputeRequest)(nil), "pb.ComputeRequest")
	proto.RegisterType((*ComputeResource)(nil), "pb.ComputeResource")
	proto.RegisterType((*DataResource)(nil), "pb.DataResource")
	proto.RegisterType((*Location)(nil), "pb.Location")
	proto.RegisterType((*Allocation)(nil), "pb.Allocation")
	proto.RegisterType((*AllocationResult)(nil), "pb.AllocationResult")
	proto.RegisterType((*Heartbeat)(nil), "pb.Heartbeat")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*DataLocation)(nil), "pb.DataLocation")
	proto.RegisterType((*FlowExecutionStatus)(nil), "pb.FlowExecutionStatus")
	proto.RegisterType((*FlowExecutionStatus_Task)(nil), "pb.FlowExecutionStatus.Task")
	proto.RegisterType((*FlowExecutionStatus_Step)(nil), "pb.FlowExecutionStatus.Step")
	proto.RegisterType((*FlowExecutionStatus_Dataset)(nil), "pb.FlowExecutionStatus.Dataset")
	proto.RegisterType((*FlowExecutionStatus_DatasetShard)(nil), "pb.FlowExecutionStatus.DatasetShard")
	proto.RegisterType((*FlowExecutionStatus_StepGroup)(nil), "pb.FlowExecutionStatus.StepGroup")
	proto.RegisterType((*FlowExecutionStatus_TaskGroup)(nil), "pb.FlowExecutionStatus.TaskGroup")
	proto.RegisterType((*FlowExecutionStatus_TaskGroup_Execution)(nil), "pb.FlowExecutionStatus.TaskGroup.Execution")
	proto.RegisterType((*FlowExecutionStatus_DriverInfo)(nil), "pb.FlowExecutionStatus.DriverInfo")
	proto.RegisterType((*FileResourceRequest)(nil), "pb.FileResourceRequest")
	proto.RegisterType((*FileResourceResponse)(nil), "pb.FileResourceResponse")
	proto.RegisterType((*ExecutionRequest)(nil), "pb.ExecutionRequest")
	proto.RegisterType((*ExecutionResponse)(nil), "pb.ExecutionResponse")
	proto.RegisterType((*ExecutionStat)(nil), "pb.ExecutionStat")
	proto.RegisterType((*InstructionStat)(nil), "pb.InstructionStat")
	proto.RegisterType((*ControlMessage)(nil), "pb.ControlMessage")
	proto.RegisterType((*DeleteDatasetShardRequest)(nil), "pb.DeleteDatasetShardRequest")
	proto.RegisterType((*DeleteDatasetShardResponse)(nil), "pb.DeleteDatasetShardResponse")
	proto.RegisterType((*WriteRequest)(nil), "pb.WriteRequest")
	proto.RegisterType((*ReadRequest)(nil), "pb.ReadRequest")
	proto.RegisterType((*InstructionSet)(nil), "pb.InstructionSet")
	proto.RegisterType((*Instruction)(nil), "pb.Instruction")
	proto.RegisterType((*Instruction_Select)(nil), "pb.Instruction.Select")
	proto.RegisterType((*Instruction_JoinPartitionedSorted)(nil), "pb.Instruction.JoinPartitionedSorted")
	proto.RegisterType((*Instruction_CoGroupPartitionedSorted)(nil), "pb.Instruction.CoGroupPartitionedSorted")
	proto.RegisterType((*Instruction_PipeAsArgs)(nil), "pb.Instruction.PipeAsArgs")
	proto.RegisterType((*Instruction_ScatterPartitions)(nil), "pb.Instruction.ScatterPartitions")
	proto.RegisterType((*Instruction_CollectPartitions)(nil), "pb.Instruction.CollectPartitions")
	proto.RegisterType((*Instruction_InputSplitReader)(nil), "pb.Instruction.InputSplitReader")
	proto.RegisterType((*Instruction_RoundRobin)(nil), "pb.Instruction.RoundRobin")
	proto.RegisterType((*Instruction_LocalTop)(nil), "pb.Instruction.LocalTop")
	proto.RegisterType((*Instruction_Broadcast)(nil), "pb.Instruction.Broadcast")
	proto.RegisterType((*Instruction_LocalHashAndJoinWith)(nil), "pb.Instruction.LocalHashAndJoinWith")
	proto.RegisterType((*Instruction_Script)(nil), "pb.Instruction.Script")
	proto.RegisterType((*Instruction_LocalSort)(nil), "pb.Instruction.LocalSort")
	proto.RegisterType((*Instruction_MergeSortedTo)(nil), "pb.Instruction.MergeSortedTo")
	proto.RegisterType((*Instruction_MergeTo)(nil), "pb.Instruction.MergeTo")
	proto.RegisterType((*Instruction_LocalDistinct)(nil), "pb.Instruction.LocalDistinct")
	proto.RegisterType((*Instruction_LocalLimit)(nil), "pb.Instruction.LocalLimit")
	proto.RegisterType((*Instruction_LocalGroupBySorted)(nil), "pb.Instruction.LocalGroupBySorted")
	proto.RegisterType((*OrderBy)(nil), "pb.OrderBy")
	proto.RegisterType((*DatasetShard)(nil), "pb.DatasetShard")
	proto.RegisterType((*DatasetShardLocation)(nil), "pb.DatasetShardLocation")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GleamMaster service

type GleamMasterClient interface {
	GetResources(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*AllocationResult, error)
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GleamMaster_SendHeartbeatClient, error)
	SendFlowExecutionStatus(ctx context.Context, opts ...grpc.CallOption) (GleamMaster_SendFlowExecutionStatusClient, error)
}

type gleamMasterClient struct {
	cc *grpc.ClientConn
}

func NewGleamMasterClient(cc *grpc.ClientConn) GleamMasterClient {
	return &gleamMasterClient{cc}
}

func (c *gleamMasterClient) GetResources(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*AllocationResult, error) {
	out := new(AllocationResult)
	err := grpc.Invoke(ctx, "/pb.GleamMaster/GetResources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gleamMasterClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GleamMaster_SendHeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GleamMaster_serviceDesc.Streams[0], c.cc, "/pb.GleamMaster/SendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &gleamMasterSendHeartbeatClient{stream}
	return x, nil
}

type GleamMaster_SendHeartbeatClient interface {
	Send(*Heartbeat) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type gleamMasterSendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *gleamMasterSendHeartbeatClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gleamMasterSendHeartbeatClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gleamMasterClient) SendFlowExecutionStatus(ctx context.Context, opts ...grpc.CallOption) (GleamMaster_SendFlowExecutionStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GleamMaster_serviceDesc.Streams[1], c.cc, "/pb.GleamMaster/SendFlowExecutionStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &gleamMasterSendFlowExecutionStatusClient{stream}
	return x, nil
}

type GleamMaster_SendFlowExecutionStatusClient interface {
	Send(*FlowExecutionStatus) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type gleamMasterSendFlowExecutionStatusClient struct {
	grpc.ClientStream
}

func (x *gleamMasterSendFlowExecutionStatusClient) Send(m *FlowExecutionStatus) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gleamMasterSendFlowExecutionStatusClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GleamMaster service

type GleamMasterServer interface {
	GetResources(context.Context, *ComputeRequest) (*AllocationResult, error)
	SendHeartbeat(GleamMaster_SendHeartbeatServer) error
	SendFlowExecutionStatus(GleamMaster_SendFlowExecutionStatusServer) error
}

func RegisterGleamMasterServer(s *grpc.Server, srv GleamMasterServer) {
	s.RegisterService(&_GleamMaster_serviceDesc, srv)
}

func _GleamMaster_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GleamMasterServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GleamMaster/GetResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GleamMasterServer).GetResources(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GleamMaster_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GleamMasterServer).SendHeartbeat(&gleamMasterSendHeartbeatServer{stream})
}

type GleamMaster_SendHeartbeatServer interface {
	SendAndClose(*Empty) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type gleamMasterSendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *gleamMasterSendHeartbeatServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gleamMasterSendHeartbeatServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GleamMaster_SendFlowExecutionStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GleamMasterServer).SendFlowExecutionStatus(&gleamMasterSendFlowExecutionStatusServer{stream})
}

type GleamMaster_SendFlowExecutionStatusServer interface {
	SendAndClose(*Empty) error
	Recv() (*FlowExecutionStatus, error)
	grpc.ServerStream
}

type gleamMasterSendFlowExecutionStatusServer struct {
	grpc.ServerStream
}

func (x *gleamMasterSendFlowExecutionStatusServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gleamMasterSendFlowExecutionStatusServer) Recv() (*FlowExecutionStatus, error) {
	m := new(FlowExecutionStatus)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GleamMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GleamMaster",
	HandlerType: (*GleamMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResources",
			Handler:    _GleamMaster_GetResources_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendHeartbeat",
			Handler:       _GleamMaster_SendHeartbeat_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendFlowExecutionStatus",
			Handler:       _GleamMaster_SendFlowExecutionStatus_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gleam.proto",
}

// Client API for GleamExecutor service

type GleamExecutorClient interface {
	CollectExecutionStatistics(ctx context.Context, opts ...grpc.CallOption) (GleamExecutor_CollectExecutionStatisticsClient, error)
}

type gleamExecutorClient struct {
	cc *grpc.ClientConn
}

func NewGleamExecutorClient(cc *grpc.ClientConn) GleamExecutorClient {
	return &gleamExecutorClient{cc}
}

func (c *gleamExecutorClient) CollectExecutionStatistics(ctx context.Context, opts ...grpc.CallOption) (GleamExecutor_CollectExecutionStatisticsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GleamExecutor_serviceDesc.Streams[0], c.cc, "/pb.GleamExecutor/CollectExecutionStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &gleamExecutorCollectExecutionStatisticsClient{stream}
	return x, nil
}

type GleamExecutor_CollectExecutionStatisticsClient interface {
	Send(*ExecutionStat) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type gleamExecutorCollectExecutionStatisticsClient struct {
	grpc.ClientStream
}

func (x *gleamExecutorCollectExecutionStatisticsClient) Send(m *ExecutionStat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gleamExecutorCollectExecutionStatisticsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GleamExecutor service

type GleamExecutorServer interface {
	CollectExecutionStatistics(GleamExecutor_CollectExecutionStatisticsServer) error
}

func RegisterGleamExecutorServer(s *grpc.Server, srv GleamExecutorServer) {
	s.RegisterService(&_GleamExecutor_serviceDesc, srv)
}

func _GleamExecutor_CollectExecutionStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GleamExecutorServer).CollectExecutionStatistics(&gleamExecutorCollectExecutionStatisticsServer{stream})
}

type GleamExecutor_CollectExecutionStatisticsServer interface {
	SendAndClose(*Empty) error
	Recv() (*ExecutionStat, error)
	grpc.ServerStream
}

type gleamExecutorCollectExecutionStatisticsServer struct {
	grpc.ServerStream
}

func (x *gleamExecutorCollectExecutionStatisticsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gleamExecutorCollectExecutionStatisticsServer) Recv() (*ExecutionStat, error) {
	m := new(ExecutionStat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GleamExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GleamExecutor",
	HandlerType: (*GleamExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CollectExecutionStatistics",
			Handler:       _GleamExecutor_CollectExecutionStatistics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gleam.proto",
}

// Client API for GleamAgent service

type GleamAgentClient interface {
	SendFileResource(ctx context.Context, opts ...grpc.CallOption) (GleamAgent_SendFileResourceClient, error)
	Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (GleamAgent_ExecuteClient, error)
	// collect execution stats from "gleam execute" processes
	CollectExecutionStatistics(ctx context.Context, opts ...grpc.CallOption) (GleamAgent_CollectExecutionStatisticsClient, error)
	Delete(ctx context.Context, in *DeleteDatasetShardRequest, opts ...grpc.CallOption) (*DeleteDatasetShardResponse, error)
}

type gleamAgentClient struct {
	cc *grpc.ClientConn
}

func NewGleamAgentClient(cc *grpc.ClientConn) GleamAgentClient {
	return &gleamAgentClient{cc}
}

func (c *gleamAgentClient) SendFileResource(ctx context.Context, opts ...grpc.CallOption) (GleamAgent_SendFileResourceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GleamAgent_serviceDesc.Streams[0], c.cc, "/pb.GleamAgent/SendFileResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &gleamAgentSendFileResourceClient{stream}
	return x, nil
}

type GleamAgent_SendFileResourceClient interface {
	Send(*FileResourceRequest) error
	Recv() (*FileResourceResponse, error)
	grpc.ClientStream
}

type gleamAgentSendFileResourceClient struct {
	grpc.ClientStream
}

func (x *gleamAgentSendFileResourceClient) Send(m *FileResourceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gleamAgentSendFileResourceClient) Recv() (*FileResourceResponse, error) {
	m := new(FileResourceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gleamAgentClient) Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (GleamAgent_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GleamAgent_serviceDesc.Streams[1], c.cc, "/pb.GleamAgent/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &gleamAgentExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GleamAgent_ExecuteClient interface {
	Recv() (*ExecutionResponse, error)
	grpc.ClientStream
}

type gleamAgentExecuteClient struct {
	grpc.ClientStream
}

func (x *gleamAgentExecuteClient) Recv() (*ExecutionResponse, error) {
	m := new(ExecutionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gleamAgentClient) CollectExecutionStatistics(ctx context.Context, opts ...grpc.CallOption) (GleamAgent_CollectExecutionStatisticsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GleamAgent_serviceDesc.Streams[2], c.cc, "/pb.GleamAgent/CollectExecutionStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &gleamAgentCollectExecutionStatisticsClient{stream}
	return x, nil
}

type GleamAgent_CollectExecutionStatisticsClient interface {
	Send(*ExecutionStat) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type gleamAgentCollectExecutionStatisticsClient struct {
	grpc.ClientStream
}

func (x *gleamAgentCollectExecutionStatisticsClient) Send(m *ExecutionStat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gleamAgentCollectExecutionStatisticsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gleamAgentClient) Delete(ctx context.Context, in *DeleteDatasetShardRequest, opts ...grpc.CallOption) (*DeleteDatasetShardResponse, error) {
	out := new(DeleteDatasetShardResponse)
	err := grpc.Invoke(ctx, "/pb.GleamAgent/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GleamAgent service

type GleamAgentServer interface {
	SendFileResource(GleamAgent_SendFileResourceServer) error
	Execute(*ExecutionRequest, GleamAgent_ExecuteServer) error
	// collect execution stats from "gleam execute" processes
	CollectExecutionStatistics(GleamAgent_CollectExecutionStatisticsServer) error
	Delete(context.Context, *DeleteDatasetShardRequest) (*DeleteDatasetShardResponse, error)
}

func RegisterGleamAgentServer(s *grpc.Server, srv GleamAgentServer) {
	s.RegisterService(&_GleamAgent_serviceDesc, srv)
}

func _GleamAgent_SendFileResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GleamAgentServer).SendFileResource(&gleamAgentSendFileResourceServer{stream})
}

type GleamAgent_SendFileResourceServer interface {
	Send(*FileResourceResponse) error
	Recv() (*FileResourceRequest, error)
	grpc.ServerStream
}

type gleamAgentSendFileResourceServer struct {
	grpc.ServerStream
}

func (x *gleamAgentSendFileResourceServer) Send(m *FileResourceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gleamAgentSendFileResourceServer) Recv() (*FileResourceRequest, error) {
	m := new(FileResourceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GleamAgent_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GleamAgentServer).Execute(m, &gleamAgentExecuteServer{stream})
}

type GleamAgent_ExecuteServer interface {
	Send(*ExecutionResponse) error
	grpc.ServerStream
}

type gleamAgentExecuteServer struct {
	grpc.ServerStream
}

func (x *gleamAgentExecuteServer) Send(m *ExecutionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GleamAgent_CollectExecutionStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GleamAgentServer).CollectExecutionStatistics(&gleamAgentCollectExecutionStatisticsServer{stream})
}

type GleamAgent_CollectExecutionStatisticsServer interface {
	SendAndClose(*Empty) error
	Recv() (*ExecutionStat, error)
	grpc.ServerStream
}

type gleamAgentCollectExecutionStatisticsServer struct {
	grpc.ServerStream
}

func (x *gleamAgentCollectExecutionStatisticsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gleamAgentCollectExecutionStatisticsServer) Recv() (*ExecutionStat, error) {
	m := new(ExecutionStat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GleamAgent_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GleamAgentServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GleamAgent/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GleamAgentServer).Delete(ctx, req.(*DeleteDatasetShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GleamAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GleamAgent",
	HandlerType: (*GleamAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _GleamAgent_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFileResource",
			Handler:       _GleamAgent_SendFileResource_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Execute",
			Handler:       _GleamAgent_Execute_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CollectExecutionStatistics",
			Handler:       _GleamAgent_CollectExecutionStatistics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gleam.proto",
}

func init() { proto.RegisterFile("gleam.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x59, 0xcd, 0x6e, 0x1c, 0xc7,
	0x11, 0xf6, 0xec, 0x1f, 0x77, 0x6b, 0x97, 0x7f, 0x4d, 0x4a, 0x1a, 0x4f, 0x64, 0x89, 0x1e, 0x28,
	0x32, 0x93, 0xc0, 0xb4, 0x44, 0x2b, 0x70, 0xa0, 0x04, 0x41, 0x28, 0x52, 0x3f, 0x2b, 0x2f, 0x45,
	0xa1, 0x49, 0xc0, 0xf9, 0x01, 0x42, 0x0c, 0x77, 0x9a, 0xe4, 0x98, 0xbb, 0x33, 0x9b, 0xe9, 0x5e,
	0x49, 0xcc, 0x0b, 0xe4, 0x10, 0xe4, 0x10, 0x20, 0x97, 0xdc, 0xf2, 0x10, 0x41, 0x2e, 0x7e, 0x88,
	0x3c, 0x41, 0x6e, 0xce, 0x23, 0xe4, 0x96, 0x43, 0x50, 0xd5, 0x3d, 0xbf, 0x3b, 0x4b, 0xd1, 0xc8,
	0x6d, 0xba, 0xea, 0xab, 0xea, 0xea, 0xea, 0xaa, 0xea, 0xea, 0x1e, 0xe8, 0x9e, 0x8d, 0x84, 0x37,
	0xde, 0x9a, 0xc4, 0x91, 0x8a, 0x58, 0x6d, 0x72, 0xe2, 0xfe, 0xd3, 0x82, 0xa5, 0xdd, 0x68, 0x3c,
	0x99, 0x2a, 0xc1, 0xc5, 0xef, 0xa6, 0x42, 0x2a, 0x76, 0x17, 0xba, 0xbe, 0xa7, 0xbc, 0xe3, 0xa1,
	0x08, 0x95, 0x88, 0x6d, 0x6b, 0xc3, 0xda, 0xec, 0x70, 0x40, 0xd2, 0x2e, 0x51, 0xd8, 0x2f, 0x60,
	0x75, 0xa8, 0x45, 0x8e, 0x63, 0x21, 0xa3, 0x69, 0x3c, 0x14, 0xd2, 0xae, 0x6d, 0xd4, 0x37, 0xbb,
	0xdb, 0x6b, 0x5b, 0x93, 0x93, 0xad, 0x54, 0x9f, 0xe6, 0xf1, 0x95, 0x61, 0x91, 0x20, 0x99, 0x03,
	0xed, 0xa9, 0x14, 0x71, 0xe8, 0x8d, 0x85, 0x5d, 0x27, 0xfd, 0xe9, 0x18, 0x79, 0xe7, 0x91, 0x54,
	0xc4, 0x6b, 0x68, 0x5e, 0x32, 0x66, 0x2e, 0xf4, 0x4e, 0x47, 0xd1, 0xdb, 0x17, 0x9e, 0x3c, 0xdf,
	0x8d, 0x7c, 0x61, 0x37, 0x37, 0xac, 0xcd, 0x45, 0x5e, 0xa0, 0xb9, 0xdf, 0x58, 0xb0, 0x5c, 0xb2,
	0x80, 0x7d, 0x0f, 0x3a, 0xc3, 0xc9, 0xf4, 0x78, 0x18, 0x4d, 0x43, 0x45, 0x0b, 0x6a, 0xf2, 0xf6,
	0x70, 0x32, 0xdd, 0xc5, 0x71, 0xc2, 0x1c, 0x89, 0x37, 0x62, 0x64, 0xd7, 0x52, 0xe6, 0x00, 0xc7,
	0xc8, 0x3c, 0x4b, 0x25, 0xeb, 0x9a, 0x79, 0x96, 0x93, 0x3c, 0x4b, 0x25, 0x1b, 0x29, 0x33, 0x95,
	0x1c, 0x8b, 0x71, 0x14, 0x5f, 0x1e, 0x8f, 0x4f, 0xc8, 0xd0, 0x3a, 0x6f, 0x6b, 0xc2, 0xfe, 0x09,
	0xbb, 0x05, 0x0b, 0x7e, 0x20, 0x2f, 0x90, 0xd5, 0x22, 0x56, 0x0b, 0x87, 0xfb, 0x27, 0xee, 0x00,
	0x7a, 0x7b, 0x9e, 0xf2, 0x52, 0xcb, 0x37, 0xa1, 0x3d, 0x8a, 0x86, 0x9e, 0x0a, 0xa2, 0x90, 0x0c,
	0xef, 0x6e, 0xf7, 0xd0, 0xc5, 0x03, 0x43, 0xe3, 0x29, 0x97, 0x31, 0x68, 0xc8, 0xe0, 0xf7, 0x82,
	0x56, 0x50, 0xe7, 0xf4, 0xed, 0x5e, 0x40, 0x3b, 0x41, 0xbe, 0x7f, 0x5b, 0x19, 0x34, 0x62, 0x6f,
	0x78, 0x41, 0x0a, 0x3a, 0x9c, 0xbe, 0xd9, 0x4d, 0x68, 0x49, 0x11, 0xbf, 0x11, 0xb1, 0xd9, 0x26,
	0x33, 0x42, 0xec, 0x24, 0x8a, 0x95, 0x59, 0x34, 0x7d, 0xbb, 0x01, 0xc0, 0xce, 0x28, 0x35, 0xe7,
	0xfa, 0x86, 0x3f, 0x84, 0x8e, 0xa7, 0xe5, 0x84, 0x4f, 0x93, 0xcf, 0x09, 0xa3, 0x0c, 0xe5, 0xee,
	0xc1, 0x4a, 0x36, 0x15, 0x17, 0x72, 0x3a, 0x52, 0xec, 0x01, 0x74, 0xbd, 0x94, 0x26, 0x6d, 0x8b,
	0xe2, 0x71, 0x09, 0x15, 0xe5, 0xa0, 0x79, 0x88, 0xfb, 0x57, 0x0b, 0x3a, 0x2f, 0x84, 0x17, 0xab,
	0x13, 0xe1, 0xa9, 0xef, 0x60, 0xf0, 0x67, 0xd0, 0x4e, 0xe2, 0xfe, 0x2a, 0x7b, 0x53, 0x50, 0x71,
	0x85, 0xf5, 0x6b, 0xad, 0x70, 0x01, 0x9a, 0x4f, 0xc7, 0x13, 0x75, 0xe9, 0xfa, 0x3a, 0x20, 0x06,
	0xb9, 0x6d, 0xa6, 0xd4, 0xd0, 0xfb, 0x47, 0xdf, 0x05, 0xd3, 0x6b, 0x57, 0x9a, 0x7e, 0x13, 0x5a,
	0x51, 0xb8, 0x17, 0xc8, 0x0b, 0x32, 0xa3, 0xcd, 0xcd, 0xc8, 0xfd, 0xb6, 0x07, 0x6b, 0xcf, 0x46,
	0xd1, 0xdb, 0xa7, 0xef, 0xc4, 0x70, 0x8a, 0xc8, 0x43, 0xe5, 0xa9, 0xa9, 0x64, 0x3b, 0x00, 0x52,
	0x89, 0xc9, 0xf3, 0x38, 0x9a, 0x4e, 0x12, 0x9f, 0x7e, 0x8c, 0xba, 0x2b, 0xc0, 0x5b, 0x87, 0x09,
	0x92, 0xe7, 0x84, 0x50, 0x85, 0xf2, 0xe4, 0x85, 0x51, 0x51, 0xbb, 0x5a, 0xc5, 0x51, 0x82, 0xe4,
	0x39, 0x21, 0xf6, 0x53, 0x68, 0x63, 0x9c, 0x4a, 0xa1, 0xa4, 0x5d, 0x27, 0x05, 0x77, 0xe7, 0x29,
	0xd8, 0xd3, 0x38, 0x9e, 0x0a, 0xb0, 0x97, 0xb0, 0x68, 0xbe, 0x0f, 0xcf, 0xbd, 0xd8, 0x97, 0x76,
	0x83, 0x34, 0xdc, 0x7b, 0x8f, 0x06, 0x02, 0xf3, 0xa2, 0x28, 0xdb, 0x86, 0x26, 0x9a, 0x25, 0xed,
	0x26, 0xe9, 0xb8, 0x7d, 0xd5, 0x32, 0xb8, 0x86, 0xa2, 0x0c, 0x7a, 0x43, 0xda, 0xad, 0xab, 0x65,
	0xd0, 0x7b, 0x5c, 0x43, 0xd9, 0x12, 0xd4, 0x02, 0xdf, 0x5e, 0xa0, 0xea, 0x56, 0x0b, 0x7c, 0xf6,
	0x18, 0x5a, 0x7e, 0x1c, 0x60, 0x1a, 0xb6, 0x69, 0x7b, 0xdd, 0xb9, 0xc6, 0x13, 0xaa, 0x1f, 0x9e,
	0x46, 0xdc, 0x48, 0x38, 0x5b, 0xd0, 0x40, 0x73, 0x28, 0x95, 0x95, 0x98, 0xf4, 0x7d, 0x53, 0x00,
	0xcd, 0xc8, 0xcc, 0xa5, 0xeb, 0x5e, 0x2d, 0xf0, 0x9d, 0xbf, 0x5b, 0xd0, 0x40, 0x5b, 0x0c, 0xc3,
	0x4a, 0x18, 0x69, 0xe4, 0xd5, 0x72, 0x91, 0x77, 0x1b, 0x3a, 0x13, 0x2f, 0x16, 0xa1, 0xea, 0xfb,
	0x7a, 0x6b, 0x9a, 0x3c, 0x23, 0x30, 0x1b, 0x16, 0xd0, 0x07, 0x7d, 0xe3, 0xf4, 0x26, 0x4f, 0x86,
	0xec, 0x3e, 0x2c, 0x05, 0xe1, 0x64, 0xaa, 0x8c, 0xb3, 0xfb, 0x3e, 0x79, 0xb4, 0xc9, 0x4b, 0x54,
	0xb6, 0x09, 0xcb, 0xd1, 0x54, 0x15, 0x80, 0x2d, 0x32, 0xa8, 0x4c, 0x76, 0x7e, 0x05, 0x0b, 0x66,
	0x30, 0x63, 0x78, 0xb6, 0xf2, 0x5a, 0x61, 0xe5, 0xf7, 0x61, 0x29, 0x16, 0x9e, 0x1f, 0x84, 0x67,
	0x87, 0x44, 0x48, 0x56, 0x50, 0xa2, 0x3a, 0x3f, 0xd3, 0x29, 0x98, 0x84, 0x01, 0x2e, 0xda, 0x4f,
	0xcd, 0xd1, 0xd3, 0x64, 0x84, 0x19, 0x7f, 0xee, 0x42, 0x27, 0x4d, 0x0c, 0xf4, 0x88, 0x34, 0x73,
	0x59, 0xda, 0x23, 0x66, 0x58, 0xf4, 0x64, 0xad, 0xe4, 0x49, 0xe7, 0xdb, 0x3a, 0x74, 0xd2, 0xdc,
	0xb8, 0x42, 0x4b, 0xce, 0xe3, 0xb5, 0xa2, 0xc7, 0xb7, 0x60, 0x21, 0xd6, 0x07, 0xbc, 0xa9, 0x40,
	0xeb, 0x18, 0x43, 0x69, 0xfc, 0x98, 0xc3, 0x9f, 0x27, 0x20, 0xb6, 0x05, 0x90, 0xd5, 0x4a, 0xaa,
	0xf3, 0xb3, 0xd5, 0x34, 0x87, 0x60, 0x5f, 0x02, 0x88, 0x44, 0x59, 0x92, 0x1f, 0x3f, 0x7a, 0x6f,
	0x9a, 0xe7, 0x0c, 0xc8, 0x89, 0x3b, 0xff, 0xb1, 0xa0, 0x93, 0x72, 0xd8, 0x47, 0x58, 0x84, 0xbc,
	0x58, 0x1d, 0xab, 0xc0, 0x14, 0xbe, 0x3a, 0xef, 0x10, 0xe5, 0x28, 0x18, 0xd3, 0xe1, 0x2e, 0x55,
	0x34, 0xd1, 0x5c, 0x7d, 0xfa, 0xb5, 0x91, 0x40, 0xcc, 0xbb, 0xd0, 0x95, 0x97, 0x52, 0x89, 0xb1,
	0x66, 0xe3, 0xd2, 0x2d, 0x0e, 0x9a, 0x94, 0x48, 0x63, 0xeb, 0xa1, 0xd9, 0x0d, 0x62, 0x53, 0x2f,
	0x42, 0xcc, 0x75, 0x68, 0x8a, 0x38, 0x8e, 0x62, 0x3a, 0xbf, 0x7b, 0x5c, 0x0f, 0x50, 0xa7, 0x8e,
	0xbe, 0xe3, 0x73, 0x4f, 0x9e, 0x53, 0x40, 0xf6, 0x38, 0x68, 0x12, 0xb6, 0x21, 0xec, 0x0b, 0x58,
	0x14, 0xf9, 0x15, 0x53, 0x26, 0x77, 0xb7, 0x57, 0x0b, 0x1e, 0x47, 0x06, 0x2f, 0xe2, 0x9c, 0x7f,
	0x59, 0x00, 0x59, 0x0a, 0x17, 0xda, 0x24, 0xeb, 0x8a, 0x36, 0xa9, 0x56, 0x6a, 0x93, 0xee, 0x24,
	0x7b, 0xe1, 0x9d, 0x8c, 0x92, 0x06, 0x2b, 0x47, 0x61, 0x9f, 0xc0, 0x72, 0x36, 0xd2, 0x8b, 0xd0,
	0x9d, 0xd6, 0x52, 0x46, 0xa6, 0x85, 0x14, 0x3d, 0xdf, 0xbc, 0xd2, 0xf3, 0xad, 0x92, 0xe7, 0x93,
	0x72, 0xb1, 0x90, 0x95, 0x0b, 0xf7, 0x4f, 0x16, 0xac, 0x3d, 0x0b, 0x46, 0xd9, 0x89, 0x67, 0x82,
	0xad, 0xea, 0x50, 0x5b, 0x81, 0xba, 0x1f, 0xc4, 0x66, 0x6d, 0xf8, 0x89, 0x28, 0xb2, 0xb5, 0x4e,
	0x75, 0x91, 0xbe, 0x67, 0x3a, 0xc2, 0xc6, 0x6c, 0x47, 0x88, 0x49, 0x31, 0x8c, 0x42, 0x25, 0x42,
	0x65, 0xf6, 0x31, 0x19, 0xba, 0x03, 0x58, 0x2f, 0x9a, 0x23, 0x27, 0x51, 0x28, 0x05, 0xbb, 0x07,
	0x8b, 0xde, 0x08, 0xab, 0xc0, 0xe5, 0xd3, 0x77, 0x81, 0x54, 0x92, 0x0c, 0x6b, 0xf3, 0x22, 0x11,
	0x33, 0x3d, 0xd2, 0xed, 0x52, 0x9b, 0xd7, 0xa2, 0x0b, 0xf7, 0xcf, 0x16, 0xac, 0x94, 0x13, 0x8a,
	0x3d, 0xc6, 0x4a, 0x27, 0x55, 0x3c, 0x1d, 0xd2, 0x2e, 0x0b, 0x65, 0x9a, 0x0b, 0x86, 0xc1, 0xd0,
	0x2f, 0x70, 0x78, 0x09, 0x59, 0xe1, 0x82, 0x7c, 0xeb, 0x51, 0xbf, 0x46, 0xeb, 0xe1, 0xfe, 0xc3,
	0x82, 0xd5, 0x9c, 0x4d, 0x66, 0x7d, 0xd8, 0x06, 0x50, 0xb8, 0x92, 0x31, 0x3d, 0x6e, 0x46, 0x59,
	0xbc, 0xd7, 0xf2, 0xf1, 0x7e, 0x07, 0x72, 0x09, 0x53, 0x91, 0x42, 0x26, 0x4c, 0x8f, 0xaa, 0x32,
	0x68, 0x26, 0x15, 0x9a, 0xd7, 0x4b, 0x05, 0xf7, 0xb7, 0xb0, 0x58, 0xe0, 0xcf, 0xec, 0xb4, 0x55,
	0xb1, 0xd3, 0x3f, 0xc0, 0xb3, 0xd6, 0x53, 0x85, 0xdb, 0x48, 0xde, 0xc7, 0x38, 0x8f, 0x46, 0xb8,
	0x7f, 0xb4, 0x60, 0xb9, 0xc4, 0x9a, 0x7b, 0x44, 0xde, 0x84, 0x96, 0x2e, 0xa3, 0xc9, 0x01, 0xa2,
	0x47, 0x68, 0x12, 0x9d, 0x57, 0x74, 0x1b, 0x30, 0x3d, 0x72, 0x9d, 0x17, 0x68, 0x18, 0x4a, 0xda,
	0xb9, 0x09, 0xa8, 0x41, 0xa0, 0x22, 0x11, 0x5b, 0xd1, 0xa5, 0xdd, 0x28, 0x54, 0x71, 0x34, 0xda,
	0x17, 0x52, 0x7a, 0x67, 0x94, 0xc4, 0x81, 0x3c, 0xa0, 0xf6, 0xac, 0x7f, 0x60, 0x02, 0x30, 0x47,
	0x61, 0x0f, 0xa1, 0x8b, 0xc1, 0x68, 0xe2, 0xcc, 0xf4, 0x7d, 0xcb, 0xb8, 0x62, 0x9e, 0x91, 0x79,
	0x1e, 0xc3, 0x1e, 0x41, 0xef, 0x6d, 0x1c, 0xa4, 0x37, 0x3d, 0x13, 0x41, 0x2b, 0x28, 0xf3, 0x55,
	0x8e, 0xce, 0x0b, 0x28, 0xf7, 0x33, 0xf8, 0x70, 0x4f, 0x8c, 0x84, 0x12, 0x85, 0xce, 0x68, 0x7e,
	0xe6, 0xba, 0xdb, 0xe0, 0x54, 0x09, 0x98, 0xd8, 0x4b, 0x63, 0x4c, 0x8b, 0xe8, 0x81, 0x1b, 0x43,
	0x2f, 0x6f, 0x02, 0xdb, 0x80, 0xee, 0xf0, 0xdc, 0x0b, 0x43, 0x31, 0x7a, 0x95, 0xa9, 0xcf, 0x93,
	0xd0, 0x3f, 0x64, 0x66, 0xfc, 0x2a, 0x2b, 0x81, 0x39, 0x0a, 0x6a, 0xc0, 0xb5, 0x8b, 0x78, 0x37,
	0x77, 0x77, 0xcb, 0x93, 0xdc, 0x03, 0xe8, 0xe6, 0x5c, 0x75, 0xbd, 0x29, 0xb5, 0x7c, 0x7e, 0xca,
	0x8c, 0xe2, 0xfe, 0xdb, 0x82, 0xa5, 0x62, 0x4a, 0xb3, 0xcf, 0x31, 0x44, 0x52, 0x4a, 0xd2, 0x42,
	0x2f, 0x97, 0x02, 0x93, 0x17, 0x40, 0x65, 0xd3, 0x6b, 0x33, 0xa6, 0xcf, 0x24, 0x43, 0xbd, 0x22,
	0x19, 0x36, 0xa0, 0x1b, 0xc8, 0xd7, 0x71, 0x74, 0x1a, 0x8c, 0x82, 0xf0, 0x8c, 0xe2, 0xae, 0xcd,
	0xf3, 0x24, 0xd4, 0xe2, 0x9d, 0x89, 0x50, 0xed, 0xf8, 0x7e, 0x2c, 0xa4, 0xa4, 0xdc, 0xec, 0xf0,
	0x02, 0x2d, 0xdd, 0xe0, 0x56, 0x6e, 0x83, 0xff, 0xcb, 0xa0, 0x9b, 0xb3, 0xfe, 0x3b, 0xe7, 0xcd,
	0x1d, 0x00, 0x7d, 0x13, 0xee, 0x87, 0xfb, 0x4f, 0xcc, 0xce, 0xe4, 0x28, 0xec, 0x25, 0xac, 0x51,
	0x0e, 0x51, 0xe0, 0x0c, 0xd2, 0x2b, 0x9d, 0x6e, 0xdc, 0x6d, 0xf4, 0x5d, 0x3e, 0xb2, 0xd2, 0x6b,
	0x4e, 0x95, 0x10, 0x1b, 0xc0, 0xfa, 0x01, 0xa5, 0x5a, 0x49, 0x59, 0xf3, 0x3d, 0xca, 0xd6, 0xa3,
	0x0a, 0x29, 0xb6, 0x85, 0xf7, 0xe1, 0x91, 0x18, 0x2a, 0xf2, 0x47, 0x77, 0xfb, 0x66, 0x69, 0x23,
	0xb7, 0x0e, 0x89, 0xcb, 0x0d, 0x8a, 0xfd, 0x06, 0x6e, 0x7c, 0x1d, 0x05, 0xe1, 0x6b, 0x2f, 0x56,
	0x01, 0xf2, 0x85, 0x7f, 0x18, 0xc5, 0x78, 0x0b, 0xd4, 0x1d, 0xc1, 0xf7, 0xcb, 0xe2, 0x2f, 0xab,
	0xc0, 0xbc, 0x5a, 0x07, 0xf3, 0xc1, 0x1e, 0x46, 0xd4, 0x46, 0xcd, 0xea, 0xd7, 0xf7, 0x84, 0xcd,
	0xb2, 0xfe, 0xdd, 0x39, 0x78, 0x3e, 0x57, 0x13, 0x7b, 0x0c, 0x30, 0x09, 0x26, 0x62, 0x47, 0xee,
	0xc4, 0x67, 0xd2, 0xee, 0x90, 0x5e, 0xa7, 0xac, 0xf7, 0x75, 0x8a, 0xe0, 0x39, 0x34, 0x3b, 0x80,
	0x55, 0x39, 0xf4, 0x94, 0x12, 0x71, 0xaa, 0x57, 0xda, 0x40, 0x2a, 0x3e, 0x9e, 0xf1, 0x5c, 0x19,
	0xc8, 0x67, 0x65, 0x51, 0xe1, 0x30, 0x1a, 0xa1, 0x6b, 0x73, 0x0a, 0xbb, 0xd5, 0x0a, 0x77, 0xcb,
	0x40, 0x3e, 0x2b, 0xcb, 0x06, 0xb0, 0xa2, 0xa3, 0x66, 0x32, 0x0a, 0x14, 0xa7, 0x0c, 0xb3, 0x7b,
	0xa4, 0x6f, 0xa3, 0xac, 0xaf, 0x5f, 0xc2, 0xf1, 0x19, 0x49, 0xf4, 0x55, 0x1c, 0x4d, 0x43, 0x9f,
	0x47, 0x27, 0x41, 0x68, 0x2f, 0x56, 0xfb, 0x8a, 0xa7, 0x08, 0x9e, 0x43, 0xb3, 0x47, 0xfa, 0x12,
	0x3f, 0x3a, 0x8a, 0x26, 0xf6, 0x12, 0x49, 0xda, 0x65, 0xc9, 0x81, 0xe1, 0xf3, 0x14, 0xc9, 0xbe,
	0x80, 0xce, 0x49, 0x1c, 0x79, 0xfe, 0xd0, 0x93, 0xca, 0x5e, 0x26, 0xb1, 0x0f, 0xcb, 0x62, 0x4f,
	0x12, 0x00, 0xcf, 0xb0, 0xec, 0x97, 0xb0, 0x4e, 0x4a, 0xb0, 0x5c, 0xec, 0x84, 0x3e, 0x06, 0xde,
	0x57, 0x81, 0x3a, 0xb7, 0x57, 0x48, 0xc7, 0xbd, 0xca, 0xa9, 0x4b, 0x58, 0x5e, 0xa9, 0x81, 0x72,
	0x64, 0x18, 0x07, 0x13, 0x65, 0xaf, 0xce, 0xc9, 0x11, 0xe2, 0x72, 0x83, 0xc2, 0x25, 0x90, 0x1e,
	0x8c, 0x37, 0x9b, 0x55, 0x2f, 0x61, 0x90, 0x00, 0x78, 0x86, 0x65, 0xbb, 0xb0, 0x38, 0x16, 0xf1,
	0x99, 0xd0, 0x81, 0x7a, 0x14, 0xd9, 0x6b, 0x24, 0xfc, 0x51, 0x59, 0x78, 0x3f, 0x0f, 0xe2, 0x45,
	0x19, 0xf6, 0x10, 0x16, 0x88, 0x70, 0x14, 0xd9, 0xeb, 0x24, 0x7e, 0xab, 0x52, 0xfc, 0x28, 0xe2,
	0x09, 0x0e, 0xe7, 0x25, 0x23, 0xf6, 0x02, 0xa9, 0x82, 0x70, 0xa8, 0xec, 0x1b, 0xd5, 0xf3, 0x0e,
	0xf2, 0x20, 0x5e, 0x94, 0xc1, 0x50, 0x21, 0xc2, 0x20, 0x18, 0x07, 0xca, 0xbe, 0x59, 0x1d, 0x2a,
	0x83, 0x14, 0xc1, 0x73, 0x68, 0xc6, 0x81, 0xd1, 0x88, 0x32, 0xf6, 0xc9, 0xa5, 0x49, 0xf9, 0x5b,
	0xd9, 0xd3, 0xc0, 0x8c, 0x8e, 0x02, 0x92, 0x57, 0x48, 0x3b, 0x03, 0x68, 0xe9, 0xda, 0x85, 0xd5,
	0xf9, 0x42, 0x5c, 0xf6, 0x43, 0x5f, 0xbc, 0x13, 0xc9, 0x05, 0x33, 0x47, 0xc1, 0x53, 0xe3, 0x8d,
	0x37, 0x9a, 0x8a, 0x04, 0xa1, 0x2f, 0x9a, 0x05, 0x9a, 0xf3, 0x07, 0x0b, 0x6e, 0x54, 0xd6, 0x32,
	0x6c, 0xc6, 0x83, 0x82, 0xea, 0x64, 0x88, 0x77, 0xfd, 0x40, 0x0e, 0xc4, 0xa9, 0x3a, 0x98, 0x2a,
	0x11, 0xa3, 0xb4, 0xe9, 0xad, 0xcb, 0x64, 0xf6, 0x43, 0x58, 0x09, 0x24, 0x0f, 0xce, 0xce, 0x73,
	0x50, 0xfd, 0x9e, 0x35, 0x43, 0x77, 0x1e, 0x81, 0x3d, 0xaf, 0xe8, 0xcd, 0xb7, 0xc5, 0xd9, 0x00,
	0xc8, 0x4a, 0x1a, 0x9e, 0x81, 0xc3, 0xa4, 0xe5, 0xec, 0x70, 0xfa, 0x76, 0x3e, 0x85, 0xd5, 0x99,
	0x8a, 0x75, 0x85, 0xc2, 0x35, 0x58, 0x9d, 0xa9, 0x47, 0xce, 0x03, 0x58, 0x29, 0x17, 0x15, 0x76,
	0x1b, 0x3a, 0x54, 0x56, 0x8e, 0x2e, 0x27, 0xc9, 0x84, 0x19, 0xc1, 0xe9, 0x01, 0x64, 0xe5, 0xc3,
	0xd9, 0xd1, 0xcf, 0xbb, 0x54, 0x08, 0x7a, 0x60, 0x85, 0xe6, 0xf8, 0xb5, 0x42, 0xf6, 0x09, 0xb4,
	0xa3, 0xd8, 0x17, 0xf1, 0x93, 0xcb, 0xa4, 0x17, 0xee, 0x62, 0x5c, 0x1c, 0x68, 0x1a, 0x4f, 0x99,
	0x4e, 0x17, 0x3a, 0x69, 0x79, 0x70, 0x1e, 0xc0, 0x7a, 0x55, 0x9e, 0x5f, 0xb1, 0xac, 0x5f, 0x43,
	0x4b, 0x67, 0x33, 0x9e, 0xf5, 0x81, 0x44, 0x9f, 0x99, 0x56, 0xd5, 0x8c, 0xe8, 0xa5, 0xd8, 0x53,
	0xe7, 0xc9, 0xab, 0x11, 0x7e, 0x23, 0xcd, 0xc3, 0xc3, 0xa4, 0xbe, 0x51, 0x47, 0x1a, 0x7e, 0xe3,
	0x5d, 0x47, 0x84, 0x6f, 0xe8, 0x8c, 0xef, 0x70, 0xfc, 0x74, 0x1e, 0x41, 0x27, 0x4d, 0xfb, 0xc2,
	0x82, 0xac, 0xab, 0x16, 0xf4, 0x13, 0x58, 0x2c, 0xe4, 0xfb, 0xf5, 0x25, 0x3b, 0xb0, 0x60, 0x52,
	0x1d, 0x95, 0x14, 0x92, 0xf7, 0xfa, 0x4a, 0xb6, 0x01, 0xb2, 0xa4, 0x2d, 0x6d, 0x0a, 0xde, 0xba,
	0x4e, 0x4f, 0xa5, 0x48, 0x3a, 0x3a, 0x33, 0x72, 0xb6, 0x80, 0xcd, 0x26, 0xe9, 0x7c, 0xa7, 0xbb,
	0x3f, 0x86, 0x05, 0x33, 0x31, 0x36, 0xd3, 0x44, 0x35, 0x93, 0xe8, 0x01, 0x52, 0xc9, 0x20, 0x33,
	0x8f, 0x1e, 0xb8, 0x7f, 0xb1, 0x4a, 0xef, 0x58, 0x0e, 0xb4, 0x9f, 0x8d, 0xa2, 0xb7, 0xb9, 0x6e,
	0xb7, 0x7d, 0x6a, 0xc6, 0x18, 0x86, 0xd9, 0x93, 0x5b, 0xad, 0xfc, 0xc6, 0x75, 0x1f, 0x96, 0xf2,
	0x9a, 0xfa, 0xbe, 0x69, 0xe2, 0x96, 0xfc, 0x02, 0x15, 0x4b, 0xc5, 0xb3, 0xf7, 0xdc, 0xce, 0xdd,
	0xaf, 0x61, 0xbd, 0xaa, 0x01, 0xc3, 0x20, 0x79, 0x55, 0x7e, 0x13, 0x60, 0xd0, 0x78, 0x11, 0x99,
	0xcb, 0x4e, 0x87, 0x37, 0xce, 0x23, 0x7d, 0x03, 0x79, 0x8d, 0x27, 0x47, 0x3d, 0xfb, 0x15, 0x91,
	0x7b, 0xe6, 0x6e, 0xe4, 0x9f, 0xb9, 0xb7, 0xbf, 0xb1, 0xa0, 0xfb, 0x7c, 0x24, 0xbc, 0xf1, 0xbe,
	0x27, 0x15, 0x9d, 0xd7, 0xbd, 0xe7, 0x42, 0x65, 0xff, 0xa5, 0x58, 0xe1, 0x32, 0x4d, 0xd7, 0x02,
	0x67, 0xbd, 0xf4, 0xe8, 0x45, 0x7f, 0x1b, 0xdc, 0x0f, 0xd8, 0xa7, 0xb0, 0x78, 0x28, 0x42, 0x3f,
	0xfb, 0x81, 0xb0, 0x88, 0xc0, 0x74, 0xe8, 0x74, 0xe8, 0x8a, 0x4b, 0x6f, 0xf8, 0x1f, 0x6c, 0x5a,
	0x6c, 0x07, 0x6e, 0x21, 0xbc, 0xea, 0x91, 0xfd, 0xd6, 0x9c, 0x67, 0xb2, 0x92, 0x8a, 0xed, 0x03,
	0x58, 0x24, 0xe3, 0x35, 0x2c, 0x8a, 0xd9, 0xcf, 0xc1, 0x31, 0x45, 0xa5, 0x20, 0x89, 0x41, 0x3b,
	0x94, 0x6c, 0xf6, 0x8e, 0x5d, 0x56, 0xf8, 0xb7, 0x1a, 0x00, 0x69, 0xdc, 0xc1, 0x8e, 0x9f, 0x7d,
	0x09, 0x2b, 0x64, 0x62, 0xee, 0x45, 0xc4, 0xd8, 0x36, 0xfb, 0x64, 0xe3, 0xd8, 0xb3, 0x0c, 0x7d,
	0xc1, 0x43, 0xcd, 0x0f, 0x2c, 0xf6, 0x18, 0x16, 0xf4, 0xdc, 0x82, 0x55, 0xbe, 0x34, 0x3a, 0x37,
	0x4a, 0xd4, 0x44, 0xfa, 0x81, 0xf5, 0xff, 0xae, 0x8b, 0xf5, 0xa1, 0xa5, 0x2f, 0xa0, 0x8c, 0xce,
	0xe4, 0xb9, 0xb7, 0x57, 0xe7, 0xce, 0x3c, 0x76, 0x62, 0xcc, 0x49, 0x8b, 0x7e, 0x95, 0x7e, 0xfe,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x99, 0x69, 0xb4, 0x39, 0x1d, 0x00, 0x00,
}
